// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppMLPACK.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// coverTreeNeighbor
List coverTreeNeighbor(const arma::mat& dataset, const int k);
RcppExport SEXP _RcppMLPACK_coverTreeNeighbor(SEXP datasetSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(coverTreeNeighbor(dataset, k));
    return rcpp_result_gen;
END_RCPP
}
// kMeans
Rcpp::List kMeans(const arma::mat& data, const int& clusters);
RcppExport SEXP _RcppMLPACK_kMeans(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(kMeans(data, clusters));
    return rcpp_result_gen;
END_RCPP
}
// LARS
Rcpp::List LARS(arma::mat& matX, arma::vec& vecY, const double lambda1, const double lambda2, bool useCholesky, const Rcpp::Nullable<Rcpp::NumericMatrix>& testX);
RcppExport SEXP _RcppMLPACK_LARS(SEXP matXSEXP, SEXP vecYSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP useCholeskySEXP, SEXP testXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vecY(vecYSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< bool >::type useCholesky(useCholeskySEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type testX(testXSEXP);
    rcpp_result_gen = Rcpp::wrap(LARS(matX, vecY, lambda1, lambda2, useCholesky, testX));
    return rcpp_result_gen;
END_RCPP
}
// linearRegression
arma::vec linearRegression(arma::mat& matX, arma::vec& vecY, const double lambda, const bool intercept);
RcppExport SEXP _RcppMLPACK_linearRegression(SEXP matXSEXP, SEXP vecYSEXP, SEXP lambdaSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vecY(vecYSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(linearRegression(matX, vecY, lambda, intercept));
    return rcpp_result_gen;
END_RCPP
}
// logisticRegression
Rcpp::List logisticRegression(const arma::mat& train, const arma::irowvec& labels, const Rcpp::Nullable<Rcpp::NumericMatrix>& test);
RcppExport SEXP _RcppMLPACK_logisticRegression(SEXP trainSEXP, SEXP labelsSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticRegression(train, labels, test));
    return rcpp_result_gen;
END_RCPP
}
// naiveBayesClassifier
Rcpp::List naiveBayesClassifier(const arma::mat& train, const arma::irowvec& labels, const int& classes, const Rcpp::Nullable<Rcpp::NumericMatrix>& test);
RcppExport SEXP _RcppMLPACK_naiveBayesClassifier(SEXP trainSEXP, SEXP labelsSEXP, SEXP classesSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const int& >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(naiveBayesClassifier(train, labels, classes, test));
    return rcpp_result_gen;
END_RCPP
}

// dbscan
Rcpp::List dbscan(const arma::mat& data);
RcppExport SEXP _RcppMLPACK_dbscan(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(dbscan(data));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppMLPACK_coverTreeNeighbor", (DL_FUNC) &_RcppMLPACK_coverTreeNeighbor, 2},
    {"_RcppMLPACK_kMeans", (DL_FUNC) &_RcppMLPACK_kMeans, 2},
    {"_RcppMLPACK_LARS", (DL_FUNC) &_RcppMLPACK_LARS, 6},
    {"_RcppMLPACK_linearRegression", (DL_FUNC) &_RcppMLPACK_linearRegression, 4},
    {"_RcppMLPACK_logisticRegression", (DL_FUNC) &_RcppMLPACK_logisticRegression, 3},
    {"_RcppMLPACK_naiveBayesClassifier", (DL_FUNC) &_RcppMLPACK_naiveBayesClassifier, 4},
    {"_RcppMLPACK_dbscan", (DL_FUNC) &_RcppMLPACK_dbscan, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppMLPACK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
